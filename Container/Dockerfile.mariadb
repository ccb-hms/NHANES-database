# experiment with getting a functional interactive environment with R installed in 
# a standard mariadb columnstore container

# Here is an example of bulding, running and interacting with the container.
# Note that we need the --add-host option because the MariaDB services 
# attempt to resolve the container's hostname, which fails at build time.
# Need to increase shared memory with --shm-size because cpimport tool makes heavy 
# use of /dev/shm

# docker build --shm-size=256M --add-host mcs1:127.0.0.1 --progress plain --tag mariadb-test -f Container/Dockerfile.mariadb .

# docker \
#     run \
#         -d \
#         --rm \
#         -p 2200:22 \
#         -p 3306:3306 \
#         --shm-size=256M \
#         -e PM1=mcs1 \
#         --hostname=mcs1 \
#         --name mcs1 \
#         -e 'CONTAINER_USER_USERNAME=test' \
#         -e 'CONTAINER_USER_PASSWORD=test' \
#         mariadb-test

# ssh test@127.0.0.1 -p 2200 -o GlobalKnownHostsFile=/dev/null -o UserKnownHostsFile=/dev/null

# this just extends the MariaDB container, so the default credntials should work: admin:C0lumnStore!
# to log in to the database

# mariadb -h 127.0.0.1 -P 3306 -u admin -p'C0lumnStore!'

# CREATE DATABASE analytics;

# this throws an error if `provision` has not already been run
# CREATE TABLE analytics.appointments(
#     id BIGINT UNSIGNED NOT NULL,
#     name VARCHAR(200) NOT NULL,
#     phone_number VARCHAR(15) NOT NULL,
#     email VARCHAR(254) NOT NULL,
#     time DATETIME NOT NULL,
#     reason VARCHAR(15) NOT NULL,
#     status VARCHAR(10) NOT NULL,
#     doctor_id BIGINT UNSIGNED NOT NULL
# ) ENGINE=ColumnStore;


# CREATE TABLE analytics.T1(
#     id BIGINT UNSIGNED NOT NULL
# ) ENGINE=ColumnStore;

# INSERT INTO analytics.T1 VALUES (123);
# INSERT INTO analytics.T1 VALUES (456);
# INSERT INTO analytics.T1 VALUES (780);

# SELECT * FROM analytics.T1;

# and from R (after running the above):
# cn = RMariaDB::dbConnect(RMariaDB::MariaDB(), dbname="analytics", username="admin", password="C0lumnStore!", host="localhost")
# DBI::dbGetQuery(cn, "SELECT * FROM analytics.T1")

# example of starting the DB engine and waiting for it to become available to execute SQL
# the call to start-services goes in the background, provision waits on the services to 
# become available, then exits and passes control to the next statement
# RUN start-services& \
#     provision \
#     && echo "show databases; CREATE DATABASE NHANES; show databases; CREATE TABLE NHANES.TestTable (id int) ENGINE=ColumnStore; INSERT INTO NHANES.TestTable VALUES (123); SELECT * FROM NHANES.TestTable;" | mariadb -h 127.0.0.1 -P 3306 -u admin


FROM mariadb/columnstore

#------------------------------------------------------------------------------
# Configure the system
#------------------------------------------------------------------------------

# Install and configure sshd
RUN dnf -y install openssh-server openssh-clients; \
    sed -i 's/^\(UsePAM yes\)/# \1/' /etc/ssh/sshd_config; \
    ssh-keygen -q -t rsa -b 2048 -f /etc/ssh/ssh_host_rsa_key -N '' && \
    ssh-keygen -q -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key -N '' && \
    ssh-keygen -t dsa -f /etc/ssh/ssh_host_ed25519_key  -N ''; \
    dnf clean all;
EXPOSE 22

# Enable powertools
RUN dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm && \
    dnf config-manager --set-enabled powertools

# Install unixODBC
RUN dnf makecache && \
    dnf -y install \ 
        unixODBC-devel  \
        mariadb-connector-odbc

# Install additional libraries to support the R environment
RUN dnf makecache && \
    dnf -y install \ 
        openssl-devel  \
        libxml2-devel  \
        libcurl-devel  \
        harfbuzz-devel \
        fribidi-devel \
        freetype-devel \
        libpng-devel \
        libtiff-devel \
        libjpeg-devel \
        libgit2-devel \
        mysql-devel \
        git


#------------------------------------------------------------------------------
# Install R and packages
#------------------------------------------------------------------------------

# declare R version and install it
ENV R_VERSION=4.3.3
RUN dnf -y install R-${R_VERSION}
    
ENV R_HOME=/usr/lib64/R
RUN echo "export R_HOME=$R_HOME" >> /etc/profile.d/R_HOME.sh

# Enable multithreaded build for R packages
RUN echo 'options(Ncpus = max(c(parallel::detectCores()-1, 1)))' >> $R_HOME/etc/Rprofile.site

# Set CRAN repository snapshot for standard package installs
ENV R_REPOSITORY=https://packagemanager.posit.co/cran/__linux__/centos8/2024-03-20
RUN echo "options(repos = c(CRAN = \"$R_REPOSITORY\"))" >> $R_HOME/etc/Rprofile.site

# Use the remotes package to manage installations
RUN Rscript -e "install.packages('remotes')"

# Install packages required for ETL process
RUN \
    Rscript -e "remotes::install_cran('dplyr')" \
    && Rscript -e "remotes::install_cran('devtools')" \
    && Rscript -e "devtools::install_github('cjendres1/nhanes@97f1850')" \
    && Rscript -e "remotes::install_cran('DBI')" \
    && Rscript -e "remotes::install_cran('RMariaDB')" \
    && Rscript -e "remotes::install_cran('optparse')" \
    && Rscript -e "remotes::install_cran('glue')" \
    && Rscript -e "remotes::install_cran('stringr')" \
    && Rscript -e "remotes::install_cran('odbc')"
    
# Allow modification of these locations so users can install R packages without warnings
RUN chmod -R 777 $R_HOME/library
RUN chmod -R 777 /usr/share/doc/R/html/packages.html

#------------------------------------------------------------------------------
# Build the database
#------------------------------------------------------------------------------

# Disable GRANTs (anyone can log in to MariaDB without password) -- required to run the 
# DB engine at build time
RUN printf "[mysqld]\nskip-grant-tables\n" >> /etc/my.cnf

# Tell the DB engine to use cpimport for bulk import operations, see:
# https://mariadb.com/docs/server/ref/mdb/system-variables/columnstore_use_import_for_batchinsert/
RUN printf "columnstore_use_import_for_batchinsert=ALWAYS" >> /etc/my.cnf

# provision the container -- this only needs to be done once, then 
# we can just call start-services to start the whole DB stack
RUN start-services& \
    sleep 30 \
    && provision

# This is the base scratch work directory
RUN mkdir /NHANES

# This is where the ETL process will write intermediate results
RUN mkdir /NHANES/Data

# Disable MariaDB logging to stdout
RUN sed -e '/tail/s/^/#/g' -i /usr/bin/start-services

# Run the download and database build
COPY Code/R/download.R /NHANES/download.R
COPY Code/R/excluded_tables.tsv /NHANES/excluded_tables.tsv
RUN  start-services & \ 
    sleep 30 \
	&& Rscript /NHANES/download.R

# # Clone the metadata repository and checkout the version that we want 
# # to use for the import
WORKDIR /NHANES
RUN git clone https://github.com/ccb-hms/NHANES-metadata.git
WORKDIR /NHANES/NHANES-metadata
RUN git fetch --tags
RUN git checkout tags/v3.10.0

# # Import the metadata
COPY Code/R/etlVariableCodebook.R /NHANES/etlVariableCodebook.R
# # TODO: Fix this to start MariaDB services before calling Rscript.
# # TODO: Translate T-SQL in this script to work with MariaDB.
RUN start-services & sleep 30 \
    && Rscript /NHANES/etlVariableCodebook.R

# # Translate the coded responses
COPY Code/R/translate-table.R /NHANES/translate-table.R
COPY Code/R/translateRawTables.R /NHANES/translateRawTables.R
# # TODO: Fix this to start MariaDB services before calling Rscript
# # TODO: Fix this script to use the nhanesA functionality to translate the tables, write them to disk and import.
# #       Translate T-SQL in this script to work with MariaDB.
WORKDIR /tmp
RUN start-services & sleep 30 \
    && Rscript /NHANES/translateRawTables.R


#------------------------------------------------------------------------------
# Final Odds and Ends
#------------------------------------------------------------------------------

# Declare which version of the container this is, and make it available inside the container 
ENV EPICONDUCTOR_CONTAINER_VERSION v1.0.0-alpha
ENV EPICONDUCTOR_COLLECTION_DATE 2024-03-20

RUN echo "EPICONDUCTOR_CONTAINER_VERSION=$EPICONDUCTOR_CONTAINER_VERSION" >> $R_HOME/etc/Renviron.site
RUN echo "EPICONDUCTOR_COLLECTION_DATE=$EPICONDUCTOR_COLLECTION_DATE" >> $R_HOME/etc/Renviron.site

RUN echo "export EPICONDUCTOR_CONTAINER_VERSION=$EPICONDUCTOR_CONTAINER_VERSION" >> /etc/profile.d/EPICONDUCTOR_CONTAINER_VERSION.sh
RUN echo "export EPICONDUCTOR_COLLECTION_DATE=$EPICONDUCTOR_COLLECTION_DATE" >> /etc/profile.d/EPICONDUCTOR_COLLECTION_DATE.sh

# Copy container startup script
RUN mkdir /startup
COPY Container/startup.sh /startup/startup.sh
RUN chmod 700 /startup/startup.sh

#------------------------------------------------------------------------------
# Run tests
#------------------------------------------------------------------------------

COPY Testing/Code/containerBuildTests.R /NHANES/containerBuildTests.R
# # TODO: fix this to start MariaDB services before calling Rscript
# # TODO: Translate T-SQL in this script to work with MariaDB
# RUN runuser -m -p  mssql -c '/opt/mssql/bin/sqlservr &' \
# 	&& Rscript /NHANES/containerBuildTests.R

# TODO: possibly re-enable GRANTs

# make the scratch directory world read / write
RUN chmod -R 777 /NHANES

ENTRYPOINT ["/startup/startup.sh"]
